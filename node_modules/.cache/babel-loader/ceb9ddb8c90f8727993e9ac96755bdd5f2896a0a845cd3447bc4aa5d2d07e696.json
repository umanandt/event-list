{"ast":null,"code":"var _jsxFileName = \"D:\\\\advance-react-router\\\\frontend\\\\src\\\\pages\\\\EventDetails.js\",\n  _s = $RefreshSig$();\nimport EventItem from \"../components/EventItem\";\nimport { redirect, useRouteLoaderData, defer } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditDetail = () => {\n  _s();\n  const data = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(EventItem, {\n    event: data.event\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n};\n_s(EditDetail, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EditDetail;\nexport default EditDetail;\n{/*export async function loader({ request, params }) {\r\n  const id = params.eventId;\r\n \n  const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n  if (!response.ok) {\r\n    throw new Response(\r\n      JSON.stringify({ message: \"could not fetch details for selected event\" }),\r\n      { status: 500 }\r\n    );\r\n  } else {\r\n    return response;\r\n  }\r\n }*/}\nexport async function loadEvent(id) {\n  const response = await fetch(\"http://localhost:8080/events\" + id);\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"could not fetch details for selected event\"\n    }), {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport async function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events.\"\n    }), {\n      status: 500\n    });\n\n    //  return json({ message: 'Could not fetch events'}, {status: 500 })\n  } else {\n    const resData = await response.json();\n    return resData.events;\n    // we can just return  (return response) we don't\n    // need to anything else\n  }\n}\n\nexport async function loader(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const id = params.eventId;\n  return defer({\n    event: loadEvent(id),\n    events: loadEvents()\n  });\n}\nexport async function action(_ref2) {\n  let {\n    params,\n    request\n  } = _ref2;\n  const eventId = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events\" + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"could not fetch details for selected event\"\n    }), {\n      status: 500\n    });\n  } else {\n    return redirect(\"/events\");\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EditDetail\");","map":{"version":3,"names":["EventItem","redirect","useRouteLoaderData","defer","jsxDEV","_jsxDEV","EditDetail","_s","data","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvent","id","response","fetch","ok","Response","JSON","stringify","message","status","resData","json","events","loadEvents","loader","_ref","request","params","eventId","action","_ref2","method","$RefreshReg$"],"sources":["D:/advance-react-router/frontend/src/pages/EventDetails.js"],"sourcesContent":["import EventItem from \"../components/EventItem\";\r\nimport { redirect, useRouteLoaderData, defer } from \"react-router-dom\";\r\n\r\nconst EditDetail = () => {\r\n  const data = useRouteLoaderData(\"event-detail\");\r\n  return <EventItem event={data.event} />;\r\n};\r\nexport default EditDetail;\r\n\r\n{/*export async function loader({ request, params }) {\r\n  const id = params.eventId;\r\n\r\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n  if (!response.ok) {\r\n    throw new Response(\r\n      JSON.stringify({ message: \"could not fetch details for selected event\" }),\r\n      { status: 500 }\r\n    );\r\n  } else {\r\n    return response;\r\n  }\r\n}*/}\r\n\r\nexport async function loadEvent(id) {\r\n  const response = await fetch(\"http://localhost:8080/events\" + id);\r\n\r\n  if (!response.ok) {\r\n    throw new Response(\r\n      JSON.stringify({ message: \"could not fetch details for selected event\" }),\r\n      { status: 500 }\r\n    );\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\nexport async function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n  if (!response.ok) {\r\n    throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n      status: 500,\r\n    });\r\n\r\n    //  return json({ message: 'Could not fetch events'}, {status: 500 })\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.events;\r\n    // we can just return  (return response) we don't\r\n    // need to anything else\r\n  }\r\n}\r\n\r\nexport async function loader({ request, params }){\r\n  const id = params.eventId;\r\n  return defer({\r\n    event: loadEvent(id),\r\n    events: loadEvents()\r\n  })\r\n}\r\n\r\nexport async function action({ params, request }) {\r\n  const eventId = params.eventId;\r\n  const response = await fetch(\"http://localhost:8080/events\" + eventId, {\r\n    method: request.method,\r\n  });\r\n  if (!response.ok) {\r\n    throw new Response(\r\n      JSON.stringify({ message: \"could not fetch details for selected event\" }),\r\n      { status: 500 }\r\n    );\r\n  } else {\r\n    return redirect(\"/events\");\r\n  }\r\n}\r\n"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,yBAAyB;AAC/C,SAASC,QAAQ,EAAEC,kBAAkB,EAAEC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,IAAI,GAAGN,kBAAkB,CAAC,cAAc,CAAC;EAC/C,oBAAOG,OAAA,CAACL,SAAS;IAACS,KAAK,EAAED,IAAI,CAACC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzC,CAAC;AAACN,EAAA,CAHID,UAAU;EAAA,QACDJ,kBAAkB;AAAA;AAAAY,EAAA,GAD3BR,UAAU;AAIhB,eAAeA,UAAU;AAEzB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAZC;AAcD,OAAO,eAAeS,SAASA,CAACC,EAAE,EAAE;EAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,GAAGF,EAAE,CAAC;EAEjE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAChBC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA6C,CAAC,CAAC,EACzE;MAAEC,MAAM,EAAE;IAAI,CAChB,CAAC;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACrC,OAAOD,OAAO,CAACE,MAAM;EACvB;AACF;AAEA,OAAO,eAAeC,UAAUA,CAAA,EAAG;EACjC,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC,EAAE;MACzEC,MAAM,EAAE;IACV,CAAC,CAAC;;IAEF;EACF,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACrC,OAAOD,OAAO,CAACE,MAAM;IACrB;IACA;EACF;AACF;;AAEA,OAAO,eAAeE,MAAMA,CAAAC,IAAA,EAAqB;EAAA,IAApB;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAC9C,MAAMd,EAAE,GAAGgB,MAAM,CAACC,OAAO;EACzB,OAAO9B,KAAK,CAAC;IACXM,KAAK,EAAEM,SAAS,CAACC,EAAE,CAAC;IACpBW,MAAM,EAAEC,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeM,MAAMA,CAAAC,KAAA,EAAsB;EAAA,IAArB;IAAEH,MAAM;IAAED;EAAQ,CAAC,GAAAI,KAAA;EAC9C,MAAMF,OAAO,GAAGD,MAAM,CAACC,OAAO;EAC9B,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,GAAGe,OAAO,EAAE;IACrEG,MAAM,EAAEL,OAAO,CAACK;EAClB,CAAC,CAAC;EACF,IAAI,CAACnB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAChBC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA6C,CAAC,CAAC,EACzE;MAAEC,MAAM,EAAE;IAAI,CAChB,CAAC;EACH,CAAC,MAAM;IACL,OAAOvB,QAAQ,CAAC,SAAS,CAAC;EAC5B;AACF;AAAC,IAAAa,EAAA;AAAAuB,YAAA,CAAAvB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}