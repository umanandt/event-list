{"ast":null,"code":"var _jsxFileName = \"D:\\\\advance-react-router\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { Suspense } from \"react\";\nimport EventsList from \"../components/EventsList\";\nimport { useLoaderData, defer, Await } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  // useloader data brings the data\n  // I am destructuring here {events - key }\n  const {\n    events\n  } = useLoaderData();\n  //return <EventsList events={events} />;\n  // Await is waiting for data\n\n  // defer and await jobs is to show somethign else\n  // till real data aarives - using fallback\n  // fallback options job is to so something till\n  // actuall data arrive\n  // in this case Loading\n\n  // suspense and fallback together\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport async function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events.\"\n    }), {\n      status: 500\n    });\n\n    //  return json({ message: 'Could not fetch events'}, {status: 500 })\n  } else {\n    const resData = await response.json();\n    return resData.events;\n    // we can just return  (return response) we don't\n    // need to anything else\n  }\n}\n\nexport default EventsPage;\nexport async function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","EventsList","useLoaderData","defer","Await","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadEvents","_c","response","fetch","ok","Response","JSON","stringify","message","status","resData","json","loader","$RefreshReg$"],"sources":["D:/advance-react-router/frontend/src/pages/Events.js"],"sourcesContent":["import { Suspense } from \"react\";\r\nimport EventsList from \"../components/EventsList\";\r\nimport { useLoaderData, defer, Await } from \"react-router-dom\";\r\n\r\nfunction EventsPage() {\r\n  // useloader data brings the data\r\n  // I am destructuring here {events - key }\r\n  const { events } = useLoaderData();\r\n  //return <EventsList events={events} />;\r\n  // Await is waiting for data\r\n\r\n\r\n  // defer and await jobs is to show somethign else\r\n  // till real data aarives - using fallback\r\n  // fallback options job is to so something till\r\n  // actuall data arrive\r\n  // in this case Loading\r\n\r\n  // suspense and fallback together\r\n  return (\r\n    <Suspense fallback={<p style={{ textAlign: \"center\" }}>Loading...</p>}>\r\n      <Await resolve={events}>\r\n        {(loadEvents) => <EventsList events={loadEvents} />}\r\n      </Await>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport async function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n  if (!response.ok) {\r\n    throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n      status: 500,\r\n    });\r\n\r\n    //  return json({ message: 'Could not fetch events'}, {status: 500 })\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.events;\r\n    // we can just return  (return response) we don't\r\n    // need to anything else\r\n  }\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport async function loader() {\r\n  return defer({\r\n    events: loadEvents(),\r\n  });\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB;EACA;EACA,MAAM;IAAEC;EAAO,CAAC,GAAGP,aAAa,CAAC,CAAC;EAClC;EACA;;EAGA;EACA;EACA;EACA;EACA;;EAEA;EACA,oBACEI,OAAA,CAACN,QAAQ;IAACU,QAAQ,eAAEJ,OAAA;MAAGK,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eACpEP,OAAA,CAACF,KAAK;MAACc,OAAO,EAAET,MAAO;MAAAI,QAAA,EACnBM,UAAU,iBAAKb,OAAA,CAACL,UAAU;QAACQ,MAAM,EAAEU;MAAW;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf;AAACT,EAAA,CAtBQD,UAAU;EAAA,QAGEL,aAAa;AAAA;AAAAkB,EAAA,GAHzBb,UAAU;AAwBnB,OAAO,eAAeY,UAAUA,CAAA,EAAG;EACjC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC,EAAE;MACzEC,MAAM,EAAE;IACV,CAAC,CAAC;;IAEF;EACF,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACrC,OAAOD,OAAO,CAACpB,MAAM;IACrB;IACA;EACF;AACF;;AAEA,eAAeF,UAAU;AAEzB,OAAO,eAAewB,MAAMA,CAAA,EAAG;EAC7B,OAAO5B,KAAK,CAAC;IACXM,MAAM,EAAEU,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAC,EAAA;AAAAY,YAAA,CAAAZ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}